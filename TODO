@high:
    ✔ initialize the project --> generate the package.json @done(24-04-08 10:31)
    ✔ configure the package.json @started(24-04-08 10:31) @done(24-04-08 10:56) @lasted(25m49s)
    ✔ inizilize the tsc --> generate the tsconfig.json @started(24-04-08 10:31) @done(24-04-08 10:57) @lasted(26m)
    ✔ configure the tsconfig.json @started(24-04-08 10:31) @done(24-04-08 10:57) @lasted(26m6s)
    ✔ create src dir in the main root of your project @started(24-04-08 10:31) @done(24-04-08 11:06) @lasted(35m46s)
    ✔ create an app.ts file in src, with the link to different routes on it @done(24-04-08 11:06)
    ✔ create a server.ts file in src, with a link with the acessPort and database port @done(24-04-08 11:11)
    ✔ create an env.ts file in src, that contains the sensible variables useful to developers @done(24-04-08 12:13)

    
@high: setting-up
    ✔ create different branches regarding to every task; @done(24-04-08 14:23)
    ✔ create entities validations; @started(24-04-08 16:38) @done(24-04-08 17:06) @lasted(28m50s)
    ✔ create interfaces from validations; @started(24-04-08 16:38) @done(24-04-09 09:59) @lasted(17h21m44s)
    ✔ create models from interfaces; @started(24-04-08 16:38) @done(24-04-09 10:00) @lasted(17h22m1s)
    ✔ create routes; @started(24-04-08 16:38) @done(24-04-10 18:08) @lasted(2d1h30m47s)
    ☐ create services; @started(24-04-08 16:38)
    ☐ create controllers; @started(24-04-08 16:38)
    ☐ create middlewares;

@high: project tasks requested
    ✔ API di autenticazione: @done(24-04-10 19:17)
        ✔ POST /api/auth/register: Permette agli utenti generici di registrarsi fornendo le informazioni necessarie come nome, email e password. @done(24-04-10 19:16)
        ✔ POST /api/auth/admin/register: Permette agli utenti admin di registrarsi fornendo le informazioni necessarie come nome, email e password. Implementare un controllo dell’email a fronte di una whitelist di indirizzi mail abilitabili all’accesso come Admin. @done(24-04-10 19:17)
        ✔ POST /api/auth/login: Consente agli utenti di effettuare l'accesso utilizzando le proprie credenziali. @done(24-04-10 19:17)
        ✔ GET /api/auth/logout: Permette agli utenti di disconnettersi. @done(24-04-10 19:17)
        ✔ GET /api/auth/user: Restituisce le informazioni dell'utente attualmente autenticato (generico o Admin). @done(24-04-10 19:17)

    ☐ API per la gestione dei prodotti:
        ✔ GET /api/products: Restituisce l'elenco completo dei prodotti disponibili del catalogo. @done(24-04-10 19:19)
        ☐ Opzionale: implementare un sistema di paginazione per migliorare e performance dell’API
        ✔ GET /api/products/:id: Restituisce i dettagli di un singolo prodotto (identificato dal suo ID). @done(24-04-10 19:21)
        ☐ POST /api/products: Permette agli utenti Admin di aggiungere un nuovo prodotto al catalogo. *
        ☐ PUT /api/products/:id: Consente agli utenti Admin di modificare le informazioni di un prodotto esistente. *
        ☐ DELETE /api/products/:id: Permette agli utenti Admin di eliminare un prodotto dal catalogo. *

    ☐ API per la gestione del carrello:
        ☐ GET /api/cart: Restituisce il contenuto attuale del carrello dell'utente. *
        ☐ POST /api/cart/add/:id: Aggiunge un prodotto al carrello dell'utente. *
        ☐ DELETE /api/cart/remove/:id: Rimuove un prodotto dal carrello dell'utente. *
        ☐ DELETE /api/cart/clear: Svuota il carrello dell'utente. *

    ☐ API degli Ordini:
        ☐ GET /api/orders: Restituisce lo storico degli ordini dell'utente.
        ☐ Opzionale: implementare un sistema di paginazione per migliorare le performance dell’API
        ☐ POST /api/orders: Permette agli utenti di creare un nuovo ordine a partire dai prodotti presenti attualmente nel carrello, con l’aggiunta dei dati di spedizione necessari:
            {
                Nome,
                Cognome,
                Indirizzo,
                Cap,
                Città,
                Regione,
                Stato
            }
        ☐ GET /api/orders/:id: Restituisce i dettagli di un singolo ordine identificato dal suo ID.
        ☐ PUT /api/orders/:id: Consente agli amministratori di aggiornare lo stato di un ordine esistente.
        ☐ DELETE /api/orders/:id: Permette agli amministratori di cancellare un ordine. Suggerimento: modificare lo stato dell’ordine

@high: remaining stuff to do
    ☐ checkrole middleware *
    ☐ product pagination
    ☐ jwt refreshToken/set a timer to existing one