@high:
    ✔ initialize the project --> generate the package.json @done(24-04-08 10:31)
    ✔ configure the package.json @started(24-04-08 10:31) @done(24-04-08 10:56) @lasted(25m50s)
    ✔ initialize the tsc --> generate the tsconfig.json @started(24-04-08 10:31) @done(24-04-08 10:57) @lasted(25m51s)
    ✔ configure the tsconfig.json @started(24-04-08 10:31) @done(24-04-08 10:57) @lasted(26m6s)
    ✔ create src dir in the main root of your project @started(24-04-08 10:31) @done(24-04-08 11:06) @lasted(35m46s)
    ✔ create an app.ts file in src, with the link to different routes on it @done(24-04-08 11:06)
    ✔ create a server.ts file in src, with a link with the acessPort and database port @done(24-04-08 11:11)
    ✔ create an env.ts file in src, that contains the sensible variables useful to developers @done(24-04-08 12:13)

    
✔ @high: setting-up @done(24-04-11 17:38)
    ✔ create different branches regarding to every task; @done(24-04-08 14:23)
    ✔ create entities validations; @started(24-04-08 16:38) @done(24-04-08 17:06) @lasted(28m50s)
    ✔ create interfaces from validations; @started(24-04-08 16:38) @done(24-04-09 09:59) @lasted(17h21m44s)
    ✔ create models from interfaces; @started(24-04-08 16:38) @done(24-04-09 10:00) @lasted(17h22m1s)
    ✔ create routes; @started(24-04-08 16:38) @done(24-04-10 18:08) @lasted(2d1h30m47s)
    ✔ create services; @done(24-04-11 17:37)
    ✔ create controllers; @done(24-04-11 17:38)
    ✔ create middlewares; @done(24-04-11 17:38)

✔ @high: project tasks requested @done(24-04-11 17:38)
    ✔ Authentication API: @done(24-04-10 19:17)
        ✔ POST /api/auth/register: Allows users to register providing the necessary information such as name, email and password. @done(24-04-10 19:16)
        ✔ POST /api/auth/admin/register: Allows Admin users to register providing the necessary information such as name, email and password. Implement a check of the email against a whitelist of approved email addresses. @done(24-04-10 19:17)
        ✔ POST /api/auth/login: Allows users to log in using their credentials. @done(24-04-10 19:17)
        ✔ GET /api/auth/logout: Allows users to log out. @done(24-04-10 19:17)
        ✔ GET /api/auth/user: Returns the information of the currently authenticated user (generic or Admin). @done(24-04-10 19:17)

    ✔ API for managing products: @done(24-04-11 17:37)
        ✔ GET /api/products: Returns the complete list of available products in the catalog. @done(24-04-10 19:19)
        ☐ Optional: implement pagination to improve performance of the API
        ✔ GET /api/products/:id: Returns the details of a single product (identified by its ID). @done(24-04-10 19:21)
        ✔ POST /api/products: Allows Admin users to add a new product to the catalog. @done(24-04-11 16:13)
        ✔ PUT /api/products/:id: Allows Admin users to modify the information of an existing product. @done(24-04-11 16:15)
        ✔ DELETE /api/products/:id: Allows Admin users to remove a product from the catalog. @done(24-04-11 16:17)

    ✔ API for managing the cart: @done(24-04-11 16:51)
        ✔ GET /api/cart: Returns the current content of the user's cart. @done(24-04-11 16:21)
        ✔ POST /api/cart/add/:id: Adds a product to the user's cart. @done(24-04-11 16:21)
        ✔ DELETE /api/cart/remove/:id: Removes a product from the user's cart. @done(24-04-11 16:51)
        ✔ DELETE /api/cart/clear: Clears the user's cart. @done(24-04-11 16:51)

    ✔ API for Orders: @done(24-04-11 17:38)
        ✔ GET /api/orders: Returns the history of orders of the user. @done(24-04-11 16:29)
        ☐ Optional: implement pagination to improve performance of the API
        ✔ POST /api/orders: Allows users to create a new order from the products currently in their cart, with the required shipping data:
            {
                First name,
                Last name,
                Address,
                Zip code,
                City,
                Region,
                State
            } @done(24-04-11 16:28)
        ✔ GET /api/orders/:id: Returns the details of a single order (identified by its ID). @done(24-04-11 17:38)
        ✔ PUT /api/orders/:id: Allows Admins to update the status of an existing order. @done(24-04-11 16:48)
        ✔ DELETE /api/orders/:id: Allows Admins to delete an order. Suggestion: change the status of the order @done(24-04-11 16:49)

    ✔ Ensure checkrole middleware is implemented @done(24-04-11 16:50)
    ✔ Ensure that loggedin status is set to false when signing up @done(24-04-11 17:36)
    ✔ Update message when deleting product from cart and recalculate total price @done(24-04-11 17:32)
    ✔ Ensure that the ID of the order is the same as that of the user in the cart if not an admin @done(24-04-11 18:51)
    ☐ Implement cancel order to put back products in stock
    ✔ Ensure that an order can't be deleted if it's already been deleted @done(24-04-11 18:17)
    ✔ Remove console log @done(24-04-11 18:20)
    ☐ Implement product pagination
    ☐ Implement JWT refreshToken/set a timer to existing one
    ✔ Ensure auth info returns username, email, role and loggedIn @done(24-04-11 19:18)
    ☐ Fix Json return values
    
